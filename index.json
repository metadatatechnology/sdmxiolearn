[{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/001-structural-metadata-and-metadata-registry/","title":"Unit 01 About structural metadata and &#39;metadata registries&#39;","tags":["Docker"],"description":"","content":"\nWhat is a \u0026lsquo;metadata registry\u0026rsquo;? Wikipedia tells us that a metadata registry is a central location in an organisation where metadata definitions are stored and maintained in a controlled method.\nA metadata registry can therefore be thought of as a database for metadata.\nAbout \u0026lsquo;structural metadata\u0026rsquo; Fusion Metadata Registry focuses principally on structural metadata.\nIn SDMX, structural metadata are the Concepts, Codelists, Data Structure Definitions (DSDs) and other artefacts that together can be used for modelling statistical data domains.\nStructural metadata is often referred to simply as \u0026lsquo;structures\u0026rsquo;, and we\u0026rsquo;ll use that terminology in this module.\nFrom FMR 11, reference metadata can also be stored because SDMX 3.0 treats reference metadata sets (also called reference metadata reports) as structural metadata objects.\nFMR implements the SDMX Registry specification Section 5 of the SDMX technical specifications sets out precisely what functions a metadata registry should perform and the interfaces it provides. Fusion Metadata Registry is designed to these specifications meaning that it should work with other SDMX software tools and systems.\nIn particular, the FMR enables:\nthe submission (storage); maintenance (update); retrieval of structures. It supports most of the SDMX standard structural metadata transmission formats including:\nSDMX-ML - XML SDMX-JSON - JSON EDI Structures can therefore be easily exchanged with other organisations and used with other SDMX software tools that also accept the standard transmission formats.\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/data-conversion-fundamentals/001-sdmx-data-transmission-formats/","title":"Unit 01 SDMX data transmission formats primer","tags":["SDMX"],"description":"Unit 01 SDMX data transmission formats primer","content":"SDMX data transmission formats Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nFormat use cases Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/002-what-is-fmr/","title":"Unit 02 What is FMR?","tags":["Docker"],"description":"","content":"FMR uses the SDMX 3.0 information model FMR 11 uses the SDMX 3.0 information model internally for storing and organising the structural metadata it holds.\nWe\u0026rsquo;ll look at the SDMX 3.0 information model in more detail in the next module, but for now the key point is that FMR 11 is able to natively work with the structures as defined in SDMX 3.0.\nSDMX 2.1 structures are supported for backward compatibility where possible. Fortunately most are fully compatible with SDMX 3.0 meaning that they can be stored in and retrieved from FMR 11.\nHowever, there are two SDMX 2.1 structures that are not directly supported by SDMX 3.0:\nStructure Set - this has been replaced by Structure Maps Hierarchical Codelist - replaced by Hierarchy In these two cases, SDMX 2.1 structures will be converted to their SDMX 3.0 equivalent on load into the Registry. The transformation is one-way meaning that, once loaded, the original SDMX 2.1 structures cannot be recreated.\nFMR will also validate, transform (map) and convert SDMX datasets In addition to its core role storing structural metadata, FMR also provides three data processing services:\nData validation FMR will validate loaded datasets by applying nine quality rules which include:\nchecking that the data matches the Data Structure Definition the \u0026lsquo;representation\u0026rsquo; is correct - generally that the codes in the data are in the relevant Codelists the data complies with any defined \u0026lsquo;constraints\u0026rsquo; - a constraint for instance may be defined to limit the regions a specific data provider can report data for all mandatory attributes are included in the data \u0026lsquo;balance equalities\u0026rsquo; - any observations between series that should be consistent with one another as is often the case with financial data\nData transformation / mapping In the SDMX 3.0 information model, Structure Maps can be used to define the transformation of data from one Data Structure Definition to another. Typical use cases include transforming data received to the structure needed for internal processing, and transforming internal datasets to a simpler structure better suited to public publication.\nUsing FMR, a Structure Map can be created and tested and used to actually transform datasets to the new structure.\nData conversion FMR will convert datasets between the SDMX data transmission formats. For instance, data loaded in SDMX-CSV can be converted to SDMX-ML (XML), SDMX-JSON or EDI.\nIt\u0026rsquo;s also possible to load data from Excel workbooks - but the worksheet containing the data must use a layout that is specific to FMR.\nSDMX REST Application Programming Interface (API) in FMR FMR implements the SDMX standard REST application programming interface (API) for:\nStructure queries Structure specific schemas SDMX has two versions of the REST API:\nVersion 1 of the REST API accompanied SDMX 2.1\nVersion 2 of the REST API accompanies SDMX 3.0\nFMR 11 supports support version 2, and also version 1 for backward compatibility.\nDetails of the SDMX REST APIs are out of scope for this course, but it may be helpful to read the documentation on GitHub:\nVersion 2 structure query API documentation\nVersion 1 structure query API documentation\nThe schema API generates XML schemas for validating SDMX XML structure specific datasets using generic XML software tools like XML Spy. Again, the detail of this is outside the scope of this course but the documentation provides further reading.\nFMR provides a web user interface In addition to the REST API, FMR also provides a web user interface.\nA standard web browser (e.g. Chrome, Microsoft Edge, Safari) is all that is needed.\nThe web user interface provides the following main functions:\nBrowse, view and download any of the structures stored in the Registry Author new structures Maintain and modify existing structures Import structures from file or from another SDMX REST API service such as that provided by the SDMX Global Registry Process data using the validation, transformation (mapping) and conversion services Configure and administer the software Recap FMR is primarily a structural metadata registry whose main purpose is storage of SDMX structural metadata FMR 11 supports the SDMX 3.0 information model but will also work transparently with SDMX 2.1 structures except in the case of Structure Sets and Hierarchical Codelists FMR also provides three data processing services: validation, transformation (mapping) and data transmission format conversion There are two interfaces: SDMX-compliant REST API for automation Web user interface for interactively working with the Registry\u0026rsquo;s structural metadata content and processing data using its validation, transformation (mapping) and conversion services In the next unit In the next unit we\u0026rsquo;ll look in more detail at the SDMX 3.0 information model, the key structural metadata artefacts and how they relate to one another.\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/003-sdmx30-information-model-fundamentals/","title":"Unit 03 SDMX 3.0 information model fundamentals","tags":["Docker"],"description":"","content":"In this unit In this unit we\u0026rsquo;ll take a high level look at the SDMX 3.0 information model that underpins Fusion Metadata Registry 11, why it\u0026rsquo;s important and which bits it\u0026rsquo;s worth knowing to help get started with FMR.\nThe SDMX 3.0 model overview The SDMX 3.0 information model has around 34 separate structures which can be used for modelling data domains, modelling data collection, data discovery and other purposes.\nContrast this to typical SQL relational database models that maybe have four or five structures: table, index, view, key constraint for instance.\nThe UML schematic below shows a reasonably complete overview of the SDMX 3.0 information model, missing out only Agency Scheme, Process and Reporting Taxonomy to help improve clarity.\nYou can download a PDF version of the information model schematic for reference.\nWhy is the information model important to FMR? The SDMX 3.0 information model is how FMR structures its metadata internally. A basic knowledge of the key SDMX structures is therefore needed to use the tool effectively.\nIt\u0026rsquo;s also useful to understand the interdependencies between structures which are illustrated by the arrows and lines in the UML schematics.\nThe excerpt above from the SDMX information model shows the Dataflow\u0026rsquo;s immediate dependencies.\nImportantly, it tells us that to create a Dataflow, the information model requires we also need: a Data Structure Definition (DSD) and at least one Concept.\nIn practice, DSDs and therefore Dataflows generally need Codelists as well to define the enumeration of their dimensions, attributes and measures. So creation of a Dataflow generally requires the following sequence:\nCreate Codelists for any enumerated Data Structure components. Create all of the required Concepts, referencing the relevant Codelist if enumerated Create the Data Structure Definition referencing the Concepts Create the Dataflow referencing the Data Structure Definition FMR enforces the referential integrity of its metadata FMR records, tracks and rigorously enforces these interdependencies between structures in order to maintain the referential integrity of its internal information model.\nThe model is said to be referentially correct if the graph of structures is complete such that no structure referenced by another is missing.\nIn practice this means two things:\nAs observed in the case of the Dataflow, structures cannot be created unless every structure they depend upon already exists. Deleting a structure requires that all other structures that depend on it must also be deleted. Attempting to delete a codelist in FMR will often require the deletion of DSDs and Dataflows that depend on it.\nSimilarly, attempting to load structural metadata from a file will result in rejection if not all references are satisfied.\nItems and item schemes The structures highlighted in blue in the information model schematics are items schemes.\nThese are containers for items including Codes, Concepts, Categories and Data Providers. Items can be individually identified because each has a unique SDMX Id. However they cannot be maintained separately and can only exist within their item scheme.\nKey artefacts for data domain modelling While there are over 30 structures in the complete information model, relatively few need to be used in order to get started with FMR.\nThe following structures are required for basic data domain modelling:\nConcepts for your data domain (plus a Concept Scheme to hold and organise them) Codelist and Codes Data Structure Definition Concept Schemes and their Concepts describe the data domain\u0026rsquo;s core concepts or represented variables.\nCodelists and Codes are closely related, precisely defining the enumerations for any concepts with enumerated representation.\nData Structure Definitions (DSDs) bring it all together describing the structure of the domain\u0026rsquo;s datasets in terms of their Dimensions, Attributes, and Measures, each of which is defined by a Concept.\nKey artefacts for modelling data collection The following structures are typically used for modelling data collections:\nData Structure Definition and dependencies Dataflow Data Constraint Provision Agreement Data Provider Scheme and Data Providers While Data Structure Definitions describe a class of datasets all with the same basic structure, Dataflows can be thought of as describing a specific dataset. In the Eurosystem, a range of separate Dataflows for National Accounts all use the same ESTAT:NA_MAIN Data Structure Definition.\nProvision Agreements define which Data Providers provide data for a specific Dataflow. For international organisations and others concerned with collecting data from multiple providers, the arrangement if typically modelled using a single Dataflow and multiple Provision Agreements, one for each data provider. A single provision agreement is sufficient for most other use cases where the owner of the Dataflow provides the data.\nData Constraints allow the Valid Universe of Data to be more closely defined and can be attached at four different levels:\nData Structure Definition Dataflow Data Provider Provision Agreement A typical Data Constraint may constrain a dataset\u0026rsquo;s valid geographical regions. The standard SDMX:CL_AREA codelist for instance lists many regions, but only a few may be relevant. Creating a constraint that limits values to: DE, ES and IT ensures that only observations for those regions are valid and helps improve data quality by preventing data beng reported for other regions in error. Attaching that constraint to the Data Structure Definition applies the restricton to all Dataflows that use it. Conversly, attaching it to a specific Provision Agreement enforces the rule only for that particular Data Provider and Dataflow.\nKey artefacts for data discovery Data discovery concerns the ability of consumers of published statistical data to find the datasets, series and data points they need. The following structures can be used for that purpose:\nCategory Scheme and Categories Hierarchy Hierarchy Association For data discovery, Categories are typically used to organise Dataflows into an arbitrary tree of topics helping users to find the datasets they need by navigating down from general themes to more specific topics.\nThe European Central Bank\u0026rsquo;s public Statistical Data Warehouse uses this approach:\nThe SDMX 3.0 Hierarchy structure replaces Hierarchical Codelists from SDMX 2.1 and serve much the same purpose allowing the definition of arbitrary hierarchy trees of codes, possibly from multiple Codelists. In principle, a software tool for searching an SDMX statistical data warehouse could present these trees as a way for users to search for specific codes.\nAs an example, consider a flat codelist of indicators. Creating a Hierarchy could allow the indicators to be organised into a subject-based tree that is more easily searched than a simple flat list.\nFinally to Hierarchy Association, this structure was added in SDMX 3.0 to allow Hierarchies to be directly associated with any other \u0026lsquo;identifiable\u0026rsquo; artefact in the information model (an identifiable is anything with an Id which includes Codes and Concepts). A common use case is defining the Hierarchy\u0026rsquo;s context, for example to assign a Hierarchy to a DSD Dimension but only in the context of a specific Dataflow.\nOther artefacts in the SDMX information model In concluding this lesson it\u0026rsquo;s worth mentioning the remaining structural metadata artefacts not already covered. Broadly these fit into four categories:\nReference Metadata In SDMX 3.0, modelling of Reference Metadata and its collection follows the same approach to that of data with structures for Metadata Structure Definition (MSD), Metadataflow, Metadata Constraint, Metadata Provision Agreement and Metadata Provider which are the direct analogues for the data counterparts.\nStructure Mapping We learnt in lesson 2 of FMR\u0026rsquo;s data processing services and its function for transforming (or mapping) datasets to a different structure. Those mapping rules are primarily defined by two structures: Structure Map and Representation Map. The information model also provides two other specialist maps in the form of the Concept Scheme Map and Category Scheme Map structures for mapping Concept Schemes and Category Schemes respectively. These are lesser used in practice.\nVTL (Validation and Transformation Language) A set of six structures make up the \u0026rsquo;transformation and expression\u0026rsquo; part of the information model and are used for structuring VTL programs as SDMX metadata objects such that they can be centralised, controlled and exchanged in the same way as DSDs and Codelists.\nSpecial-purpose Structures Two structures fall into this final category: Process and Reporting Taxonomy. These are typically only used by organisations with specific use cases. For the purposes of this course, it\u0026rsquo;s simply worth noting that they exist.\nRecap An understanding of the SDMX 3.0 information model is important to using FMR effectively because it describes how the metadata organised While the complete model has around 34 structures, around 10 are needed to cover the majority of common data-related use cases: Concept Codelist Data Structure Dataflow Provision Agreement Data Provider Data Constraint Hierarchy Hierarchy Association Category Scheme In the next unit In the next unit we\u0026rsquo;ll look at how to get a running FMR installation using the self-contained Docker image.\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/004-what-is-docker/","title":"Unit 04 What is Docker","tags":["Docker"],"description":"","content":" Skip this unit if you already understand the principles of Docker and containerisation.\nIn this unit In this lesson we\u0026rsquo;ll introduce just enough about Docker and the principles of \u0026lsquo;containerisation\u0026rsquo; in order to use it for running Fusion Metadata Registry.\nWhat is Docker? Docker is a software platform for building and running applications in containers.\nContainers are executable collections of software in which application code is packaged, along with its libraries and dependencies so that it can be run anywhere, whether it be on desktop, traditional IT, or the cloud.\nDocker describes a container as:\n\u0026ldquo;A container packages up code and its dependencies so the application runs quickly and reliably from one computing environment to another.\u0026rdquo;\nContainers offer two key advantages for running FMR:\nAll of the software components needed to run FMR are assembled, configured and pre-packaged meaning that the user simply needs to start the container to get a fully functioning installation. Containers can be run on any operating system that supports Docker - Windows, Linux, Apple Mac. There are also cloud services such as Google Cloud Run and Microsoft Azure. For this module, we\u0026rsquo;ll focus on running FMR on a desktop PC or laptop using Docker Desktop.\nContainers and images An image is template from which containers can be created.\nStarting from the FMR image, multiple separate containers can be created if needed each with their own isolated FMR installation complete with its own configuration and metadata content.\nThe Docker Hub image repository Docker Images are stored and can be retrieved from an image repository.\nDocker Hub is the main image repository and is where the FMR images are stored.\nAs we\u0026rsquo;ll see later, Docker provides commands to \u0026lsquo;pull\u0026rsquo; images from Docker Hub\nRunning Docker using Docker Desktop For personal and light production use, Docker Desktop provides a simple way to run containers on desktop PCs and laptops. It is free to use for small businesses and non-commercial applications.\nDocker Desktop has both a command line interface:\nand a graphical user interface:\nRecap Docker is a way to run applications like FMR in containers The FMR image is pre-configured with everything needed for a complete running installation The FMR image is a template from which multiple containers can be created if needed Docker Desktop is the simplest way to run FMR containers on desktop PCs and laptops In the next lesson In the next lesson we\u0026rsquo;ll look at how to install and operate Docker Desktop.\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/005-install-and-operate-docker-desktop/","title":"Unit 05 Install and operate Docker Desktop","tags":["Docker"],"description":"","content":" Skip this unit if you already understand how to use Docker Desktop.\nIn this unit In this unit we\u0026rsquo;ll learn how to install Docker Desktop and basic operations.\nGet Docker Desktop The machine will need at least 4GB of memory.\nOn Windows Double-click Docker Desktop Installer.exe to run the installer. Download the installer from Docker Hub. It typically downloads to your Downloads folder, or you can run it from the recent downloads bar at the bottom of your web browser.\nWhen prompted, ensure the Use WSL 2 instead of Hyper-V option on the Configuration page is selected or not depending on your choice of backend. If your system only supports one of the two options, you will not be able to select which backend to use.\nFollow the instructions on the installation wizard to authorize the installer and proceed with the install.\nWhen the installation is successful, click Close to complete the installation process.\nIf your admin account is different to your user account, you must add the user to the docker-users group. Run Computer Management as an administrator and navigate to Local Users and Groups \u0026gt; Groups \u0026gt; docker-users. Right-click to add the user to the group. Log out and log back in for the changes to take effect.\nThe Docker documentation has additional details: https://docs.docker.com/desktop/install/windows-install/\nOn Mac For Macs with Intel chips, note that macOS must be version 10.15 or newer.\nDouble-click Docker.dmg to open the installer, then drag the Docker icon to the Applications folder. Download the installer from Docker Hub.\nDouble-click Docker.app in the Applications folder to start Docker Desktop.\nUsing the Docker command line interface The task of pulling images from the Docker Hub repository and creating containers is best done using the Docker Command Line Interface.\nStart by opening a command prompt window\u0026hellip;\nIn Windows you can use either:\nCommand Prompt Powershell On Macs, use the Terminal app.\nEverything is done using the docker command. In the following Windows example, the docker images command returns a list of images that have been pulled into the local Docker Desktop.\nThe following Docker commands are the most useful when working with the containerised FMR:\nDocker command Action docker pull [image name] Pull the named image from Docker Hub downloading it to the local machine docker container create [container details] Create a container from a pulled image docker start [container name] Start the named container docker stop [container name] Stop the named container docker images List the pulled Docker images docker ps List the active containers docker ps -a List all containers including those that are inactive Working with the Docker Desktop user interface The Docker Desktop graphical user interface provides an alternative way to view and manage containers and images.\nYou\u0026rsquo;ll find it easier to use the graphical interface for the following tasks:\nDeleting unneeded or out of date images and containers Starting, stopping and pausing a running container Opening a terminal session on a running container allowing control of its processes, access to the embedded MySQL operating database and access to the filesystem including FMR\u0026rsquo;s runtime and error logs Recap Install Docker Desktop by downloading for Mac or Windows from Docker Hub The Docker command line interface can be used for pulling images, creating containers and other administrative tasks The Docker Desktop graphical user interface provides a good way to view images and containers, and is convenient for tasks including starting container terminal sessions, starting, stopping and pausing running containers, and deleting unused containers and images In the next unit In the next unit we\u0026rsquo;ll learn how to use Docker command line to create a running FMR container.\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/006-run-fmr-docker-container/","title":"Unit 06 Create and run an FMR Docker container","tags":["Docker"],"description":"","content":"In this unit In this final unit we\u0026rsquo;ll learn how to use Docker command line to pull the image for the latest FMR version, start a running container and begin working with FMR.\nStart an FMR container from Docker command line Using Docker command line, execute the following commands:\nPull the latest FMR image from Docker Hub:\ndocker pull metadatatechnology/fmr-mysql:latest This could take a few minutes while layers that make up the image are downloaded from Docker Hub.\nCreate a container called \u0026lsquo;fmr\u0026rsquo;:\ndocker container create --name fmr --publish 8080:8080 metadatatechnology/fmr-mysql:latest The --publish 8080:8080 tells Docker to export the container\u0026rsquo;s internal port 8080 to the host machine using the same port number. When we later come to work with the running FMR, we\u0026rsquo;ll see that the URL references port 8080.\nStart the container:\ndocker start fmr The container will take between one and two minutes to start.\nUsing a web browser, navigate to: http://localhost:8080/\nThe FMR web user interface will appear when start-up is complete\nThe container can be stopped using the following command:\ndocker stop fmr Log in to add and maintain metadata, and administer the registry In the standard Docker image, FMR is configured with a single superuser account called \u0026lsquo;root\u0026rsquo;.\nLogging-in as this account allows the user to:\nAdd and maintain structural metadata Administer the system and configure the settings The default credentials are:\nUsername: root\nPassword: password\nIt\u0026rsquo;s good practice to change the default root password to something more secure inless the container is being used for personal or non-critical testing. Do this from the Security menu choosing \u0026lsquo;Root User Account\u0026rsquo;.\nTips and points to note Any metadata added to the registry will be persisted in the container.\nThus FMR containers can be stopped and restarted as required without loosing any work.\nDeleting a container will also delete any structural metadata held in its registry.\nFMR can additionally use an external Microsoft Active Directory or Open LDAP directory service for user authentication allowing other user accounts in addition to the default \u0026lsquo;root\u0026rsquo; account.\nThe procedure for is outside of the scope of this module.\nRecap The three Docker command line commands needed to start an FMR container from scratch are: docker pull, docker container create and docker start Use the internal \u0026lsquo;root\u0026rsquo; superuser account to add and maintain structural metadata, administer the system an configure the settings - but change the password from the default for security reasons A container can be stopped and restarted without losing its metadata content, but the content will be destroyed if the container is deleted "},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/data-conversion-fundamentals/","title":"Data conversion fundamentals","tags":[],"description":"Course Introduction","content":"SDMX data conversion fundamentals using Fusion Metadata Registry Module introduction The SDMX standard provides 12 alternative formats for transmitting data including EDI, JSON, CSV and seven different variants of XML. Enevitably it\u0026rsquo;s a common requirement to convert SDMX datasets between these formats. In this module we look at how to use Fusion Metadata Registry for that purpose.\nLearning objectives Attain a basic understanding of the common SDMX data transmission formats including the most-used XML formats, JSON, CSV and EDI, plus Fusion Metadata Registry\u0026rsquo;s own Excel format Converting datasets to different transmission formats interactively using the FMR web user interface How to use the SDMX-ML 2.1 structure specific \u0026lsquo;quick convert\u0026rsquo; function Principles of how to use FMR\u0026rsquo;s data transformation REST API for converting datasets programmatically Prerequisites Prerequisites\nA basic understanding of the core SDMX concepts and the key metadata structures would be helpful including: Data Structure Definition, Concept, Codelist and Dataflow.\nUnits in this module Unit 01 SDMX data transmission formats primer "},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/getting-start-running-in-docker/","title":"Running FMR in Docker","tags":[],"description":"Course Introduction","content":"Getting started with Fusion Metadata Registry - running FMR in Docker Module introduction Welcome to this module on getting started with Fusion Metadata Registry and specifically how to run the software in Docker.\nFusion Metadata Registry (FMR) is a free to use software tool for working with SDMX structures and data.\nYou\u0026rsquo;ll need two things to start working effectively with FMR:\na basic understanding of the SDMX information model; and a running installation of the FMR software. FMR is a Java web application so it will run on a range of computing platforms including Windows, Mac and Linux. However, it requires a number of other software components including a Java runtime environment, a Java web application server and a SQL database service such as MySQL or SQL Server.\nFortunately there is a simpler way to get working in less than 10 minutes - running FMR as a Docker container.\nThis module will help you learn about what FMR is, the use cases it serves, SDMX information model fundamentals and the how to run FMR in Docker.\nLearning objectives Understand what FMR is and its role as a structural metadata registry Learn the fundamentals of the SDMX 3.0 information model Understand the principles of software \u0026lsquo;containerisation\u0026rsquo; and how Docker can be used for that purpose Installation and basic operation of Docker Desktop How to create and run FMR in a container using Docker Desktop Prerequisites Prerequisites\nA basic understanding of the core SDMX concepts and the key metadata structures would be helpful including: Data Structure Definition, Concept, Codelist and Dataflow.\nUnits in this module Unit 01 About structural metadata and \u0026#39;metadata registries\u0026#39; Unit 02 What is FMR? Unit 03 SDMX 3.0 information model fundamentals Unit 04 What is Docker Unit 05 Install and operate Docker Desktop Unit 06 Create and run an FMR Docker container "},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/mapping-split-or-combine-dimensions/","title":"Split out or collapse dimensions for time series data","tags":[],"description":"Course Introduction","content":"Split out or collapse dimensions for time series data Module introduction A common use case is transforming compound indicators to two or more discrete dimensions to make the dataset easier to query or as a precursor to processing operations. The inverse where multiple dimensions are collapsed into a compound indicator is also used for simplifying datasets with complex internal structures ready for public dissemination.\nIn this module you will learn how to achieve both of these transformations using SDMX Structure Maps and FMR\u0026rsquo;s data transformation services.\nLearning objectives SDMX 3.0 structure mapping principles Prepare a SDMX Structure Map to transform a dataset splitting a compound indicator into a number of discrete dimensions Execute the transformation using FMR\u0026rsquo;s web user interface Prepare a SDMX Structure map to simplify the structure of a dataset by collapsing several dimensions into a single compound indicator Prerequisites Prerequisites\nA good understanding of data domain modelling using SDMX is required including use of the following artefacts: Concepts, Codelists, Data Structure Definitions and Dataflows A basic understanding of the principles of SDMX structure mapping Units in this module "},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/mapping-microdata-to-timeseries/","title":"Transform multi-measure non-time series data to time series","tags":[],"description":"Course Introduction","content":"Getting started with Fusion Metadata Registry - running FMR in Docker Module introduction Learning objectives Attain a basic understanding of the SDMX data transmission formats including EDI, 2.0, 2.1, 3.0 and Excel Converting datasets to different transmission formats interactively using the FMR web user interfaces The SDMX-ML 2.1 structure specific quick convert function Introduction to the FMR Data Transformation Web Service Prerequisites Prerequisites\nA basic understanding of the core SDMX concepts and the key metadata structures would be helpful including: Data Structure Definition, Concept, Codelist and Dataflow.\nUnits in this module "},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/fmr/","title":"Fusion Metadata Registry","tags":[],"description":"Fusion Metadata Registry - SDMX 3.0 structural metadata registry","content":"e-learning modules Data conversion fundamentals Learn how to convert SDMX data between transmission formats using FMR\nThis module introduces the various SDMX transmission formats for exchanging statistical data and explores how datasets can be converted from one format to another interactively using FMR\u0026rsquo;s web user interface, and programatically with the REST API.\nIntroductory Business User FMR\nRunning FMR in Docker Learn how to run the FMR software in a Docker container\nIn this module we introduce a simple and quick way to get started with Fusion Metadata Registry by running the software in a \u0026lsquo;Docker container\u0026rsquo;.\nFusion Metadata Registry (FMR) is principally a structural metadata registry. We\u0026rsquo;ll explore what that means and how it can be used including a high-level introduction to the SDMX 3.0 information model, an understanding of which is essential to work effectively with FMR.\nThe principles of \u0026lsquo;software containerisation\u0026rsquo; are covered for those new to the subject, and the module concludes with a step-by-step guide on how to deploy FMR on a desktop PC or Mac in practice using the Docker Desktop container environment.\nIntroductory Business User FMR\nSplit out or collapse dimensions for time series data Learn how to SDMX structure mapping and FMR\u0026#39;s data mapping function to split out or collapse dimensions for time series data\nA common use case is transforming compound indicators to two or more discrete dimensions to make the dataset easier to query or as a precursor to processing operations. The inverse where multiple dimensions are collapsed into a compound indicator is also used for simplifying datasets with complex internal structures ready for public dissemination. In this module you will learn how to achieve both of these transformations using SDMX Structure Maps and FMR\u0026rsquo;s data transformation services.\nIntermediate Business User FMR\nTransform multi-measure non-time series data to time series Learn how to transform multi-measure sets of timestamped observations into time series using SDMX structure mapping and FMR\u0026#39;s data processing function\nThis module introduces the various SDMX transmission formats for exchanging statistical data and explores how datasets can be converted from one format to another interactively using FMR\u0026rsquo;s web user interface, and programatically with the REST API.\nAdvanced Business User FMR\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tags/sdmx/","title":"SDMX","tags":[],"description":"","content":""},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/","title":"sdmx.io e-learning library","tags":[],"description":"","content":"sdmx.io e-learning library Data conversion fundamentals Learn how to convert SDMX data between transmission formats using FMR\nThis module introduces the various SDMX transmission formats for exchanging statistical data and explores how datasets can be converted from one format to another interactively using FMR\u0026rsquo;s web user interface, and programatically with the REST API.\nIntroductory Business User FMR\nRunning FMR in Docker Learn how to run the FMR software in a Docker container\nIn this module we introduce a simple and quick way to get started with Fusion Metadata Registry by running the software in a \u0026lsquo;Docker container\u0026rsquo;.\nFusion Metadata Registry (FMR) is principally a structural metadata registry. We\u0026rsquo;ll explore what that means and how it can be used including a high-level introduction to the SDMX 3.0 information model, an understanding of which is essential to work effectively with FMR.\nThe principles of \u0026lsquo;software containerisation\u0026rsquo; are covered for those new to the subject, and the module concludes with a step-by-step guide on how to deploy FMR on a desktop PC or Mac in practice using the Docker Desktop container environment.\nIntroductory Business User FMR\nSplit out or collapse dimensions for time series data Learn how to SDMX structure mapping and FMR\u0026#39;s data mapping function to split out or collapse dimensions for time series data\nA common use case is transforming compound indicators to two or more discrete dimensions to make the dataset easier to query or as a precursor to processing operations. The inverse where multiple dimensions are collapsed into a compound indicator is also used for simplifying datasets with complex internal structures ready for public dissemination. In this module you will learn how to achieve both of these transformations using SDMX Structure Maps and FMR\u0026rsquo;s data transformation services.\nIntermediate Business User FMR\nTransform multi-measure non-time series data to time series Learn how to transform multi-measure sets of timestamped observations into time series using SDMX structure mapping and FMR\u0026#39;s data processing function\nThis module introduces the various SDMX transmission formats for exchanging statistical data and explores how datasets can be converted from one format to another interactively using FMR\u0026rsquo;s web user interface, and programatically with the REST API.\nAdvanced Business User FMR\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tools/","title":"sdmx.io tools","tags":[],"description":"sdmx.io open source software tools for official statistics","content":"Categories Fusion Metadata Registry "},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tags/","title":"Tags","tags":[],"description":"","content":""},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/tags/docker/","title":"Docker","tags":[],"description":"","content":""},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/_footer/","title":"sdmx.io e-learning","tags":[],"description":"","content":"Copyright 2022 Bank for International Settlements. All rights reserved.\n"},{"uri":"https://metadatatechnology.github.io/sdmxiolearn/_header/","title":"sdmx.io e-learning","tags":[],"description":"e-learning resources","content":" e-learning\n"}]